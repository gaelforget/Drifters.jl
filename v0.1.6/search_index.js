var documenterSearchIndex = {"docs":
[{"location":"#IndividualDisplacements.jl-1","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"","category":"section"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"IndividualDisplacements.jl computes elementary point displacements over a gridded Earth domain (e.g. a climate model C-grid). A typical application is the simulation and analysis of materials moving through atmospheric flows (e.g. dust or chemicals) or oceanic flows (e.g. plastics or planktons).","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"Inter-operability with popular climate model grids and their representation in MeshArrays.jl is a central element. The package can also read and plot trajectory simulation output from e.g. the MITgcm. It was originally developed using ECCOv4 and CBIOMES ocean model simulations (Forget et al. 2015).","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"The VelComp! and VelComp functions compute the velocity of tracked points. tests/runtests.jl uses solid body rotation as a benchmark (see below).","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"<img src=\"https://github.com/JuliaClimate/IndividualDisplacements.jl/blob/master/examples/SolidBodyRotation.png\" width=\"50%\">","category":"page"},{"location":"#API-Guide-1","page":"IndividualDisplacements.jl","title":"API Guide","text":"","category":"section"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"Modules = [IndividualDisplacements]\nOrder   = [:type,:function]","category":"page"},{"location":"#IndividualDisplacements.ReadDisplacements-Tuple{String,DataType}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.ReadDisplacements","text":"ReadDisplacements(dirIn::String,prec::DataType)\n\nRead displacements from MITgcm output file using MeshArrays and return as a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.VelComp!-Tuple{Array{Float64,1},Array{Float64,1},Dict,Any}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.VelComp!","text":"VelComp!(du,u,p::Dict,tim)\n\nInterpolate velocity from gridded fields (after exchange on u0,v0) and return position increment du (i.e. x,y,fIndex).\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.VelComp-Tuple{Array{Float64,1},Array{Float64,1},Dict,Any}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.VelComp","text":"VelComp(du,u,p::Dict,tim)\n\nInterpolate velocity from gridded fields and return position increment du\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.VelCopy-Tuple{Any,Any,DataFrames.DataFrame,Any}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.VelCopy","text":"VelCopy(du,u,p::DataFrame,t)\n\nInterpolate velocity from MITgcm float_trajectories output and return position increment du.\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.example1-Tuple{}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.example1","text":"example1()\n\nGlobal ocean case â€“ just reading from file for now.\n\ndf=IndividualDisplacements.example1()\n\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"plot_pyplot.jl\"))\nPyPlot.figure(); PlotMapProj(df,300); gcf()\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.example2-Tuple{}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.example2","text":"example2()\n\nReproducing MITgcm/verification/flt_example/ case. This is based on an extended and modified configuration of the standard MITgcm test case.\n\n(df,ref,sol)=IndividualDisplacements.example2();\n\np=dirname(pathof(IndividualDisplacements))\ninclude(joinpath(p,\"plot_pyplot.jl\"))\nPyPlot.figure(); PlotBasic(df,300,100000.0); gcf()\n\nusing Plots\nPlots.plot(sol[1,:],sol[2,:],linewidth=5,lc=:black, title=\"One Trajectory Example\",\nxaxis=\"x\",yaxis=\"y\",label=\"Julia Solution\") # legend=false\npl=Plots.plot!(ref[1,:],ref[2,:],lw=3,ls=:dash,lc=:red,label=\"MITgcm Solution\")\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.example2_setup-Tuple{}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.example2_setup","text":"example2_setup()\n\nRead gridded variables from file using MeshArrays and return result in uvetc Dictionary.\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.myread-Tuple{String,MeshArrays.gcmarray}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.myread","text":"myread()\n\nRead a gridded variable from 2x2 tile files. This is used in example2_setup() with flt_example/\n\n\n\n\n\n","category":"method"}]
}
