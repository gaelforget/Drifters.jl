var documenterSearchIndex = {"docs":
[{"location":"#IndividualDisplacements.jl-1","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"","category":"section"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"IndividualDisplacements.jl computes elementary point displacements over a gridded Earth domain (e.g. a climate model C-grid). A typical application is the simulation and analysis of materials moving through atmospheric flows (e.g. dust or chemicals) or oceanic flows (e.g. plastics or planktons).","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"Inter-operability with common climate model grids and their representation in MeshArrays.jl is a central element. The package can also read and plot trajectory simulation output from e.g. the MITgcm. It was originally developed using ECCOv4 and CBIOMES ocean model simulations (Forget et al. 2015).","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"The ⬡ and ⬡! functions compute the tracked point / individual / agent velocities. ","category":"page"},{"location":"#List-Of-Examples-1","page":"IndividualDisplacements.jl","title":"List Of Examples","text":"","category":"section"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"A solid-body-rotation example is used for unit testing:","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"test/runtests.jl\nexamples/SolidBodyRotation.jl","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"(Image: SolidBodyRotation)","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"Two examples using ⬡! and update_locations.jl:","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"examples/RandomFlow_fleet.jl\nexamples/GlobalDomain_fleet.jl","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"(Image: RandomFlow)","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"(Image: LatLonCap300mDepth)","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"Plotting recipes using three popular plotting packages:","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"examples/recipes_plots.jl\nexamples/recipes_makie.jl\nexamples/recipes_pyplot.jl\t","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"Three other examples using ⬡  are documented in the API Guide:","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"examples/examples123.jl\nexamples/example2fleet.jl\nexamples/example2more.jl","category":"page"},{"location":"#API-Guide-1","page":"IndividualDisplacements.jl","title":"API Guide","text":"","category":"section"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"","category":"page"},{"location":"#","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.jl","text":"Modules = [IndividualDisplacements]\nOrder   = [:type,:function]","category":"page"},{"location":"#IndividualDisplacements.initialize_grid_locations","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.initialize_grid_locations","text":"initialize_grid_locations(uvetc::Dict,n_subset::Int=1)\n\nDefine initial condition (u0,du) as a subset of grid points\n\n\n\n\n\n","category":"function"},{"location":"#IndividualDisplacements.initialize_random_locations","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.initialize_random_locations","text":"initialize_random_locations(Γ::Dict,n::Int=1 ; s=missing,msk=missing)\n\nDefine initial condition (u0,du) using randomly distributed longitude, latitude positions on the sphere (randn_lonlat).\n\n\n\n\n\n","category":"function"},{"location":"#IndividualDisplacements.postprocess_ODESolution-Tuple{Any,Any,Any}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.postprocess_ODESolution","text":"postprocess_ODESolution()\n\nCopy sol to a DataFrame & map position to lon,lat coordinates\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.postprocess_ODESolution_simple-Tuple{Any,Any}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.postprocess_ODESolution_simple","text":"postprocess_ODESolution_simple()\n\nCopy sol to a DataFrame & map position to x,y coordinates, and define time axis for a simple doubly periodic domain\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.randn_lonlat","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.randn_lonlat","text":"randn_lonlat(nn=1,seed=missing)\n\nRandomly distributed longitude, latitude positions on the sphere.\n\n\n\n\n\n","category":"function"},{"location":"#IndividualDisplacements.read_drifters-Tuple{String}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.read_drifters","text":"read_drifters(pth,lst;chnk=Inf,rng=(missing,missing))\n\nRead near-surface drifter data (https://doi.org/10.1002/2016JC011716) from the Global Drifter Program (https://doi.org/10.25921/7ntx-z961) into a DataFrame\n\nNote: need to use NetCDF.jl as NCDatasets.jl errors when TIME = Inf\n\npth=\"Drifter_hourly_v013/\"\nlst=[\"driftertrajGPS_1.03.nc\",\"driftertrajWMLE_1.02_block1.nc\",\"driftertrajWMLE_1.02_block2.nc\",\n   \"driftertrajWMLE_1.02_block3.nc\",\"driftertrajWMLE_1.02_block4.nc\",\"driftertrajWMLE_1.02_block5.nc\",\n   \"driftertrajWMLE_1.02_block6.nc\",\"driftertrajWMLE_1.03_block7.nc\"]\n\n#df=read_drifters( pth*lst[end],chnk=1000,rng=(2014.1,2014.2) )\n\ndf = DataFrame(lon=[], lat=[], t=[], ID=[])\nfor fil in lst\n   println(fil)\n   append!(df,read_drifters( pth*fil,chnk=10000,rng=(2005.0,2020.0) ))\n   println(size(df))\nend\n\n#sort!(df, [:t, :lat])\n#CSV.write(pth*\"Drifter_hourly_2005_2019.csv\", df)\n#unID=unique(df[!,:ID])\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.read_flt-Tuple{String,DataType}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.read_flt","text":"read_flt(dirIn::String,prec::DataType)\n\nRead displacements from MITgcm/pkg/flt output file into a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.read_mds-Tuple{String,MeshArrays.gcmarray}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.read_mds","text":"read_mds(filRoot::String,x::MeshArray)\n\nRead a gridded variable from 2x2 tile files. This is used in example2_setup() with flt_example/\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.read_uvetc-Tuple{Int64,Dict,String}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.read_uvetc","text":"read_uvetc(k::Int,γ::Dict,pth::String)\n\nDefine uvetc given the grid variables γ and a vertical level choice k including velocities obtained from files in pth\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.read_uvetc-Tuple{Int64,Float64,Dict,String}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.read_uvetc","text":"read_uvetc(k::Int,t::Float64,γ::Dict,pth::String)\n\nDefine uvetc given the grid variables γ, a vertical level choice k, the time t in seconds (Float64), and velocities obtained from files in pth.\n\nThe two climatological months (m0,m1) that bracket time t will be extracted (e.g. months 12 & 1 then 1 & 2 and so on).\n\nNote: the nitial implementation does this only approximately by setting every months duration to 1 year / 12 for simplicity; should be improved...\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.setup_periodic_domain","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.setup_periodic_domain","text":"setup_periodic_domain(np::Integer=16)\n\nSet up a periodic domain of size np x np\n\nnp=16 #domain size is np x np\nΓ=setup_periodic_domain(np)\n\n\n\n\n\n","category":"function"},{"location":"#IndividualDisplacements.NeighborTileIndices_cs-Tuple{Dict}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.NeighborTileIndices_cs","text":"NeighborTileIndices_cs(grid::Dict)\n\nDerive list of neighboring tile indices for a cs or llc grid + functions that convert indices from one tile to another. Returns a Dict to merge later.\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.NeighborTileIndices_dpdo-Tuple{Int64,Int64}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.NeighborTileIndices_dpdo","text":"NeighborTileIndices_dpdo(ni::Int,nj::Int)\n\nList of W, E, S, N neighbor tile IDs in the case of a doubly periodic domain with ni x nj tiles.\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.RelocationFunctions_cs-Tuple{MeshArrays.gcmarray}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.RelocationFunctions_cs","text":"RelocationFunctions_cs(xmpl)\n\nDefine matrix of functions to convert indices across neighboring tiles\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.RelocationFunctions_cs_check-Tuple{MeshArrays.gcmarray,Array{Function,2},Int64}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.RelocationFunctions_cs_check","text":"RelocationFunctions_cs_check(xmpl,RF,trgt)\n\nVisualize that RelocationFunctions_cs behaves as expected\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.VelComp!-Tuple{Array{Float64,1},Array{Float64,1},Dict,Any}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.VelComp!","text":"VelComp!(du,u,p::Dict,tim)\n\nInterpolate velocity from gridded fields (after exchange on u0,v0) and return position increment du (i.e. x,y,fIndex).\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.VelComp-Tuple{Array{Float64,1},Array{Float64,1},Dict,Any}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.VelComp","text":"VelComp(du,u,p::Dict,tim)\n\nInterpolate velocity from gridded fields and return position increment du\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.VelCopy-Tuple{Any,Any,DataFrames.DataFrame,Any}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.VelCopy","text":"VelCopy(du,u,p::DataFrame,t)\n\nInterpolate velocity from MITgcm float_trajectories output and return position increment du.\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.read_velocities-Tuple{MeshArrays.gcmgrid,Int64,String}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.read_velocities","text":"read_velocities(γ::gcmgrid,t::Int,pth::String)\n\nRead velocity components u,v from files in pthfor time t\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.update_location_cs!-Tuple{Array{Float64,1},Dict}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.update_location_cs!","text":"update_location_cs!\n\nUpdate location (x,y,fIndex) when out of domain. Note: initially, this only works for the dpdo grid type provided by MeshArrays.jl.\n\n\n\n\n\n","category":"method"},{"location":"#IndividualDisplacements.update_location_dpdo!-Tuple{Array{Float64,1},MeshArrays.gcmgrid}","page":"IndividualDisplacements.jl","title":"IndividualDisplacements.update_location_dpdo!","text":"update_location_dpdo!\n\nUpdate location (x,y,fIndex) when out of domain. Note: initially, this only works for the dpdo grid type provided by MeshArrays.jl.\n\n\n\n\n\n","category":"method"}]
}
